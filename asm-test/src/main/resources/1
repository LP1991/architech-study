package asm.java.lang;
import java.util.*;
import jdk.internal.org.objectweb.asm.*;
public class StringDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter cw = new ClassWriter(0);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(52, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, "java/lang/String", "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ljava/lang/String;>;Ljava/lang/CharSequence;", "java/lang/Object", new String[] { "java/io/Serializable", "java/lang/Comparable", "java/lang/CharSequence" });

cw.visitInnerClass("java/lang/String$CaseInsensitiveComparator", "java/lang/String", "CaseInsensitiveComparator", ACC_PRIVATE + ACC_STATIC);

cw.visitInnerClass("java/lang/String$1", null, null, ACC_STATIC + ACC_SYNTHETIC);

{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "value", "[C", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "hash", "I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "serialVersionUID", "J", null, new Long(-6849794470754667710L));
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "serialPersistentFields", "[Ljava/io/ObjectStreamField;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;", "Ljava/util/Comparator<Ljava/lang/String;>;", null);
fv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("");
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/String;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "hash", "I");
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "hash", "I");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([C)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([CII)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {"java/lang/String", "[C", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 3);
Label l1 = new Label();
mv.visitJumpInsn(IFGT, l1);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IFGE, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("");
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l3);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOfRange", "([CII)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(5, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([III)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {"java/lang/String", "[I", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 3);
Label l1 = new Label();
mv.visitJumpInsn(IFGT, l1);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IFGE, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("");
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l3);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 6);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 4);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IALOAD);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isBmpCodePoint", "(I)Z", false);
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
Label l7 = new Label();
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isValidCodePoint", "(I)Z", false);
Label l8 = new Label();
mv.visitJumpInsn(IFEQ, l8);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "toString", "(I)Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(6, 1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 7);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[C", Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 4);
Label l10 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l10);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(IALOAD);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 9);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isBmpCodePoint", "(I)Z", false);
Label l11 = new Label();
mv.visitJumpInsn(IFEQ, l11);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(I2C);
mv.visitInsn(CASTORE);
Label l12 = new Label();
mv.visitJumpInsn(GOTO, l12);
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 8);
mv.visitIincInsn(8, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toSurrogates", "(I[CI)V", false);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(7, 1);
mv.visitIincInsn(8, 1);
mv.visitJumpInsn(GOTO, l9);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 6);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "<init>", "([BIII)V", null, null);
{
av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V", false);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 6);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"java/lang/String", "[B", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 6);
mv.visitIincInsn(6, -1);
Label l2 = new Label();
mv.visitJumpInsn(IFLE, l2);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitInsn(BALOAD);
mv.visitIntInsn(SIPUSH, 255);
mv.visitInsn(IAND);
mv.visitInsn(I2C);
mv.visitInsn(CASTORE);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 8);
mv.visitInsn(ISHL);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 6);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 6);
mv.visitIincInsn(6, -1);
mv.visitJumpInsn(IFLE, l3);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitInsn(BALOAD);
mv.visitIntInsn(SIPUSH, 255);
mv.visitInsn(IAND);
mv.visitInsn(IOR);
mv.visitInsn(I2C);
mv.visitInsn(CASTORE);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(6, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "<init>", "([BI)V", null, null);
{
av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BIII)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "checkBounds", "([BII)V", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISUB);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BIILjava/lang/String;)V", null, new String[] { "java/io/UnsupportedEncodingException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 4);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
mv.visitInsn(DUP);
mv.visitLdcInsn("charsetName");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "(Ljava/lang/String;)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"java/lang/String", "[B", Opcodes.INTEGER, Opcodes.INTEGER, "java/lang/String"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "decode", "(Ljava/lang/String;[BII)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(5, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BIILjava/nio/charset/Charset;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 4);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
mv.visitInsn(DUP);
mv.visitLdcInsn("charset");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "(Ljava/lang/String;)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"java/lang/String", "[B", Opcodes.INTEGER, Opcodes.INTEGER, "java/nio/charset/Charset"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "decode", "(Ljava/nio/charset/Charset;[BII)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(5, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BLjava/lang/String;)V", null, new String[] { "java/io/UnsupportedEncodingException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BIILjava/lang/String;)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BLjava/nio/charset/Charset;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BIILjava/nio/charset/Charset;)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([BII)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "checkBounds", "([BII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "decode", "([BII)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "([B)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BII)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/StringBuffer;)V", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
mv.visitTryCatchBlock(l2, l3, l2, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "getValue", "()[C", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuffer", "length", "()I", false);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"java/lang/String", "java/lang/StringBuffer", "java/lang/Object"}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/StringBuilder;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "getValue", "()[C", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "length", "()I", false);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C", false);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "<init>", "([CZ)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "length", "()I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isEmpty", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "charAt", "(I)C", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(CALOAD);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "codePointAt", "(I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointAtImpl", "([CII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "codePointBefore", "(I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointBeforeImpl", "([CII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "codePointCount", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGT, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "()V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "codePointCountImpl", "([CII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "offsetByCodePoints", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/IndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IndexOutOfBoundsException", "<init>", "()V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "offsetByCodePointsImpl", "([CIIII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "getChars", "([CI)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getChars", "(II[CI)V", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_DEPRECATED, "getBytes", "(II[BI)V", null, null);
{
av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 8);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_FULL, 9, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "[B", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C"}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 6);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 5);
mv.visitIincInsn(5, 1);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ILOAD, 7);
mv.visitIincInsn(7, 1);
mv.visitInsn(CALOAD);
mv.visitInsn(I2B);
mv.visitInsn(BASTORE);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBytes", "(Ljava/lang/String;)[B", null, new String[] { "java/io/UnsupportedEncodingException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "()V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "encode", "(Ljava/lang/String;[CII)[B", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBytes", "(Ljava/nio/charset/Charset;)[B", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "()V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "encode", "(Ljava/nio/charset/Charset;[CII)[B", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBytes", "()[B", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/StringCoding", "encode", "([CII)[B", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l0);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/String");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"java/lang/String", "java/lang/Object", "java/lang/String", Opcodes.INTEGER, "[C", "[C", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 3);
mv.visitIincInsn(3, -1);
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(CALOAD);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l4);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(6, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 2, new Object[] {"java/lang/String", "java/lang/Object"}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "contentEquals", "(Ljava/lang/StringBuffer;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contentEquals", "(Ljava/lang/CharSequence;)Z", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "nonSyncContentEquals", "(Ljava/lang/AbstractStringBuilder;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "getValue", "()[C", false);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/AbstractStringBuilder", "length", "()I", false);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l0);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[C", "[C", Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(CALOAD);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l3);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "contentEquals", "(Ljava/lang/CharSequence;)Z", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
mv.visitTryCatchBlock(l2, l3, l2, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/AbstractStringBuilder");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/StringBuffer");
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/AbstractStringBuilder");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "nonSyncContentEquals", "(Ljava/lang/AbstractStringBuilder;)Z", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l1);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"java/lang/String", "java/lang/CharSequence", "java/lang/Object"}, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/AbstractStringBuilder");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "nonSyncContentEquals", "(Ljava/lang/AbstractStringBuilder;)Z", false);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/String");
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(IRETURN);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "length", "()I", true);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l7);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[C", Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l9);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "charAt", "(I)C", true);
Label l10 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l10);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "equalsIgnoreCase", "(Ljava/lang/String;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
Label l2 = new Label();
mv.visitJumpInsn(IFNULL, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "regionMatches", "(ZILjava/lang/String;II)Z", false);
mv.visitJumpInsn(IFEQ, l2);
mv.visitInsn(ICONST_1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(6, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "compareTo", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 6);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 7);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "[C", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 4);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 9);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l2);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ISUB);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "compareToIgnoreCase", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
mv.visitFieldInsn(GETSTATIC, "java/lang/String", "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Comparator", "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I", true);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "regionMatches", "(ILjava/lang/String;II)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 3);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(I2L);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(I2L);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(I2L);
mv.visitInsn(LSUB);
mv.visitInsn(LCMP);
mv.visitJumpInsn(IFGT, l0);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(I2L);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(I2L);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(I2L);
mv.visitInsn(LSUB);
mv.visitInsn(LCMP);
Label l1 = new Label();
mv.visitJumpInsn(IFLE, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 9, new Object[] {"java/lang/String", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "[C", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitIincInsn(4, -1);
Label l2 = new Label();
mv.visitJumpInsn(IFLE, l2);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitIincInsn(6, 1);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 8);
mv.visitIincInsn(8, 1);
mv.visitInsn(CALOAD);
mv.visitJumpInsn(IF_ICMPEQ, l1);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(6, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "regionMatches", "(ZILjava/lang/String;II)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ALOAD, 3);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 4);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(I2L);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(I2L);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(I2L);
mv.visitInsn(LSUB);
mv.visitInsn(LCMP);
mv.visitJumpInsn(IFGT, l0);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(I2L);
mv.visitVarInsn(ALOAD, 3);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(I2L);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(I2L);
mv.visitInsn(LSUB);
mv.visitInsn(LCMP);
Label l1 = new Label();
mv.visitJumpInsn(IFLE, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 10, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "[C", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitIincInsn(5, -1);
Label l2 = new Label();
mv.visitJumpInsn(IFLE, l2);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitIincInsn(7, 1);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ILOAD, 9);
mv.visitIincInsn(9, 1);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 11);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ILOAD, 11);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 1);
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCase", "(C)C", false);
mv.visitVarInsn(ISTORE, 12);
mv.visitVarInsn(ILOAD, 11);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCase", "(C)C", false);
mv.visitVarInsn(ISTORE, 13);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 13);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l5);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 12);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(C)C", false);
mv.visitVarInsn(ILOAD, 13);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(C)C", false);
mv.visitJumpInsn(IF_ICMPNE, l4);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(6, 14);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "startsWith", "(Ljava/lang/String;I)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(ISUB);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", "java/lang/String", Opcodes.INTEGER, "[C", Opcodes.INTEGER, "[C", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(7, -1);
mv.visitVarInsn(ILOAD, 7);
Label l2 = new Label();
mv.visitJumpInsn(IFLT, l2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitIincInsn(4, 1);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitIincInsn(6, 1);
mv.visitInsn(CALOAD);
mv.visitJumpInsn(IF_ICMPEQ, l1);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "startsWith", "(Ljava/lang/String;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;I)Z", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "endsWith", "(Ljava/lang/String;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;I)Z", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "hash", "I");
mv.visitVarInsn(ISTORE, 1);
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IFLE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "[C", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitIntInsn(BIPUSH, 31);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IMUL);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(CALOAD);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 1);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "java/lang/String", "hash", "I");
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(II)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitJumpInsn(IF_ICMPLT, l1);
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitLdcInsn(new Integer(65536));
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 5);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[C", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 3);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 1);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l5);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IRETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "indexOfSupplementary", "(II)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "indexOfSupplementary", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isValidCodePoint", "(I)Z", false);
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "highSurrogate", "(I)C", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "lowSurrogate", "(I)C", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 7);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 6);
mv.visitJumpInsn(IF_ICMPGE, l0);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(II)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
mv.visitLdcInsn(new Integer(65536));
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I", false);
mv.visitVarInsn(ISTORE, 4);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[C", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IFLT, l2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 1);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IRETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(4, -1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "lastIndexOfSupplementary", "(II)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "lastIndexOfSupplementary", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isValidCodePoint", "(I)Z", false);
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "highSurrogate", "(I)C", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "lowSurrogate", "(I)C", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_2);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I", false);
mv.visitVarInsn(ISTORE, 6);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 6);
mv.visitJumpInsn(IFLT, l0);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(6, -1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;I)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "indexOf", "(Ljava/lang/String;I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "indexOf", "([CII[CIII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(7, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "indexOf", "([CIILjava/lang/String;I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 3);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 3);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "indexOf", "([CII[CIII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(7, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "indexOf", "([CII[CIII)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l0);
mv.visitVarInsn(ILOAD, 5);
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ILOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_M1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 6);
Label l3 = new Label();
mv.visitJumpInsn(IFGE, l3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 5);
Label l4 = new Label();
mv.visitJumpInsn(IFNE, l4);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ISUB);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 9);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 8);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 7);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l7);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(9, 1);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 8);
mv.visitJumpInsn(IF_ICMPGT, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 7);
mv.visitJumpInsn(IF_ICMPEQ, l7);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 8);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l9);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 11);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 12);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ILOAD, 11);
Label l11 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 12);
mv.visitInsn(CALOAD);
mv.visitJumpInsn(IF_ICMPNE, l11);
mv.visitIincInsn(10, 1);
mv.visitIincInsn(12, 1);
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ILOAD, 11);
mv.visitJumpInsn(IF_ICMPNE, l9);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitInsn(IRETURN);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitIincInsn(9, 1);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 13);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(Ljava/lang/String;I)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "lastIndexOf", "(Ljava/lang/String;I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "lastIndexOf", "([CII[CIII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(7, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "lastIndexOf", "([CIILjava/lang/String;I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 3);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 3);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "lastIndexOf", "([CII[CIII)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(7, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "lastIndexOf", "([CII[CIII)I", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 6);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 7);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ISTORE, 6);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 5);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 8);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 11);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_FULL, 12, new Object[] {"[C", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 11);
mv.visitVarInsn(ILOAD, 10);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 9);
mv.visitJumpInsn(IF_ICMPEQ, l4);
mv.visitIincInsn(11, -1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 11);
mv.visitVarInsn(ILOAD, 10);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitInsn(ICONST_M1);
mv.visitInsn(IRETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 12);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 13);
mv.visitVarInsn(ILOAD, 8);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 14);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 13);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitIincInsn(12, -1);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 14);
mv.visitIincInsn(14, -1);
mv.visitInsn(CALOAD);
mv.visitJumpInsn(IF_ICMPEQ, l6);
mv.visitIincInsn(11, -1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 13);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 15);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "substring", "(I)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ILOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 1);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V", false);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "substring", "(II)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l1);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IFGE, l2);
mv.visitTypeInsn(NEW, "java/lang/StringIndexOutOfBoundsException");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringIndexOutOfBoundsException", "<init>", "(I)V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 1);
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitVarInsn(ALOAD, 0);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V", false);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "subSequence", "(II)Ljava/lang/CharSequence;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "concat", "(Ljava/lang/String;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOf", "([CI)[C", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getChars", "([CI)V", false);
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CZ)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "replace", "(CC)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_M1);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 5);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, "[C"}, 0, null);
mv.visitIincInsn(4, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ILOAD, 1);
mv.visitJumpInsn(IF_ICMPNE, l1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitJumpInsn(IF_ICMPGE, l0);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 6);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 7);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"[C", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 4);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(CALOAD);
mv.visitInsn(CASTORE);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 1);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l6);
mv.visitVarInsn(ILOAD, 2);
Label l7 = new Label();
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "[C", Opcodes.INTEGER}, 2, new Object[] {"[C", Opcodes.INTEGER});
mv.visitVarInsn(ILOAD, 7);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "[C", Opcodes.INTEGER}, 3, new Object[] {"[C", Opcodes.INTEGER, Opcodes.INTEGER});
mv.visitInsn(CASTORE);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(ICONST_1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CZ)V", false);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "matches", "(Ljava/lang/String;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Pattern", "matches", "(Ljava/lang/String;Ljava/lang/CharSequence;)Z", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "contains", "(Ljava/lang/CharSequence;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "toString", "()Ljava/lang/String;", true);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;)I", false);
mv.visitInsn(ICONST_M1);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Pattern", "compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Pattern", "matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Matcher", "replaceFirst", "(Ljava/lang/String;)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Pattern", "compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Pattern", "matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Matcher", "replaceAll", "(Ljava/lang/String;)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "toString", "()Ljava/lang/String;", true);
mv.visitIntInsn(BIPUSH, 16);
mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Pattern", "compile", "(Ljava/lang/String;I)Ljava/util/regex/Pattern;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Pattern", "matcher", "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/CharSequence", "toString", "()Ljava/lang/String;", true);
mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Matcher", "quoteReplacement", "(Ljava/lang/String;)Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Matcher", "replaceAll", "(Ljava/lang/String;)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "split", "(Ljava/lang/String;I)[Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitLdcInsn(".$|()[{^?*+\\");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(I)I", false);
mv.visitInsn(ICONST_M1);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
mv.visitInsn(ICONST_2);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
mv.visitIntInsn(BIPUSH, 92);
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 3);
mv.visitIntInsn(BIPUSH, 48);
mv.visitInsn(ISUB);
mv.visitIntInsn(BIPUSH, 57);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitInsn(IOR);
mv.visitJumpInsn(IFGE, l2);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 97);
mv.visitInsn(ISUB);
mv.visitIntInsn(BIPUSH, 122);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitInsn(IOR);
mv.visitJumpInsn(IFGE, l2);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 65);
mv.visitInsn(ISUB);
mv.visitIntInsn(BIPUSH, 90);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ISUB);
mv.visitInsn(IOR);
mv.visitJumpInsn(IFGE, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitLdcInsn(new Integer(55296));
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l3);
mv.visitVarInsn(ILOAD, 3);
mv.visitLdcInsn(new Integer(57343));
mv.visitJumpInsn(IF_ICMPLE, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 2);
Label l4 = new Label();
mv.visitJumpInsn(IFLE, l4);
mv.visitInsn(ICONST_1);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 6);
mv.visitTypeInsn(NEW, "java/util/ArrayList");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
mv.visitVarInsn(ASTORE, 7);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "java/util/ArrayList"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(II)I", false);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 5);
mv.visitInsn(ICONST_M1);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l7);
mv.visitVarInsn(ILOAD, 6);
Label l8 = new Label();
mv.visitJumpInsn(IFEQ, l8);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "size", "()I", false);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l9);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 4);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
Label l10 = new Label();
mv.visitJumpInsn(IFNE, l10);
mv.visitInsn(ICONST_1);
mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(AASTORE);
mv.visitInsn(ARETURN);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 6);
Label l11 = new Label();
mv.visitJumpInsn(IFEQ, l11);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "size", "()I", false);
mv.visitVarInsn(ILOAD, 2);
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l12);
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(POP);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "size", "()I", false);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 2);
Label l13 = new Label();
mv.visitJumpInsn(IFNE, l13);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitJumpInsn(IFLE, l13);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 8);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "get", "(I)Ljava/lang/Object;", false);
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
mv.visitJumpInsn(IFNE, l13);
mv.visitIincInsn(8, -1);
mv.visitJumpInsn(GOTO, l14);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "subList", "(II)Ljava/util/List;", false);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/String;");
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {"java/lang/String", "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Pattern", "compile", "(Ljava/lang/String;)Ljava/util/regex/Pattern;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/regex/Pattern", "split", "(Ljava/lang/CharSequence;I)[Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "split", "(Ljava/lang/String;)[Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;I)[Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_VARARGS, "join", "(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitInsn(POP);
mv.visitTypeInsn(NEW, "java/util/StringJoiner");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/StringJoiner", "<init>", "(Ljava/lang/CharSequence;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {"java/lang/CharSequence", "[Ljava/lang/CharSequence;", "java/util/StringJoiner", "[Ljava/lang/CharSequence;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/StringJoiner", "add", "(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;", false);
mv.visitInsn(POP);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/StringJoiner", "toString", "()Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "join", "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;", "(Ljava/lang/CharSequence;Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)Ljava/lang/String;", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Objects", "requireNonNull", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitInsn(POP);
mv.visitTypeInsn(NEW, "java/util/StringJoiner");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/StringJoiner", "<init>", "(Ljava/lang/CharSequence;)V", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/Iterable", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 3);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/util/StringJoiner", "java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "java/lang/CharSequence");
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/StringJoiner", "add", "(Ljava/lang/CharSequence;)Ljava/util/StringJoiner;", false);
mv.visitInsn(POP);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/StringJoiner", "toString", "()Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "()V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitLdcInsn(new Integer(55296));
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l3);
mv.visitVarInsn(ILOAD, 4);
mv.visitLdcInsn(new Integer(56319));
mv.visitJumpInsn(IF_ICMPGT, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "codePointAt", "(I)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(I)I", false);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l4);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "charCount", "(I)I", false);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 2);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(C)C", false);
Label l7 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l7);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(2, 1);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Locale", "getLanguage", "()Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("tr");
Label l8 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l8);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("az");
mv.visitJumpInsn(IF_ACMPEQ, l8);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("lt");
Label l9 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l9);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[C", Opcodes.INTEGER, "java/lang/String"}, 0, null);
mv.visitInsn(ICONST_1);
Label l10 = new Label();
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 12);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 3);
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 12);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(I2C);
mv.visitLdcInsn(new Integer(55296));
Label l13 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l13);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(I2C);
mv.visitLdcInsn(new Integer(56319));
mv.visitJumpInsn(IF_ICMPGT, l13);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "codePointAt", "(I)I", false);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "charCount", "(I)I", false);
mv.visitVarInsn(ISTORE, 11);
Label l14 = new Label();
mv.visitJumpInsn(GOTO, l14);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.INTEGER, Opcodes.TOP, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 11);
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 7);
Label l15 = new Label();
mv.visitJumpInsn(IFNE, l15);
mv.visitVarInsn(ILOAD, 10);
mv.visitIntInsn(SIPUSH, 931);
mv.visitJumpInsn(IF_ICMPEQ, l15);
mv.visitVarInsn(ILOAD, 10);
mv.visitIntInsn(SIPUSH, 304);
Label l16 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l16);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ConditionalSpecialCasing", "toLowerCaseEx", "(Ljava/lang/String;ILjava/util/Locale;)I", false);
mv.visitVarInsn(ISTORE, 9);
Label l17 = new Label();
mv.visitJumpInsn(GOTO, l17);
mv.visitLabel(l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toLowerCase", "(I)I", false);
mv.visitVarInsn(ISTORE, 9);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ICONST_M1);
Label l18 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l18);
mv.visitVarInsn(ILOAD, 9);
mv.visitLdcInsn(new Integer(65536));
Label l19 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l19);
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ICONST_M1);
Label l20 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l20);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ConditionalSpecialCasing", "toLowerCaseCharArray", "(Ljava/lang/String;ILjava/util/Locale;)[C", false);
mv.visitVarInsn(ASTORE, 8);
Label l21 = new Label();
mv.visitJumpInsn(GOTO, l21);
mv.visitLabel(l20);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ICONST_2);
Label l22 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l22);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I[CI)I", false);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ISUB);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 5);
Label l23 = new Label();
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l22);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I)[C", false);
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l21);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, "[C", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 13);
mv.visitVarInsn(ILOAD, 13);
mv.visitVarInsn(ILOAD, 11);
Label l24 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l24);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 13);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ISUB);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 14);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 14);
mv.visitVarInsn(ASTORE, 4);
mv.visitLabel(l24);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 14);
Label l25 = new Label();
mv.visitLabel(l25);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 14);
mv.visitVarInsn(ILOAD, 13);
Label l26 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l26);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 14);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ILOAD, 14);
mv.visitInsn(CALOAD);
mv.visitInsn(CASTORE);
mv.visitIincInsn(14, 1);
mv.visitJumpInsn(GOTO, l25);
mv.visitLabel(l26);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 13);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ISUB);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 5);
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(I2C);
mv.visitInsn(CASTORE);
mv.visitLabel(l23);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 12);
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, "[C", Opcodes.INTEGER, "java/lang/String", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 15);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "toLowerCase", "()Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Locale", "getDefault", "()Ljava/util/Locale;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/lang/NullPointerException");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NullPointerException", "<init>", "()V", false);
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitLdcInsn(new Integer(55296));
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l3);
mv.visitVarInsn(ILOAD, 4);
mv.visitLdcInsn(new Integer(56319));
mv.visitJumpInsn(IF_ICMPGT, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "codePointAt", "(I)I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "charCount", "(I)I", false);
mv.visitVarInsn(ISTORE, 5);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCaseEx", "(I)I", false);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(ICONST_M1);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l5);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 6);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l6);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 2);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Locale", "getLanguage", "()Ljava/lang/String;", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("tr");
Label l7 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l7);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("az");
mv.visitJumpInsn(IF_ACMPEQ, l7);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("lt");
Label l8 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l8);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, "[C", "java/lang/String"}, 0, null);
mv.visitInsn(ICONST_1);
Label l9 = new Label();
mv.visitJumpInsn(GOTO, l9);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 12);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.TOP, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 3);
Label l11 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ILOAD, 12);
mv.visitInsn(CALOAD);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(I2C);
mv.visitLdcInsn(new Integer(55296));
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l12);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(I2C);
mv.visitLdcInsn(new Integer(56319));
mv.visitJumpInsn(IF_ICMPGT, l12);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "codePointAt", "(I)I", false);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "charCount", "(I)I", false);
mv.visitVarInsn(ISTORE, 11);
Label l13 = new Label();
mv.visitJumpInsn(GOTO, l13);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.INTEGER, Opcodes.TOP, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 11);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 7);
Label l14 = new Label();
mv.visitJumpInsn(IFEQ, l14);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ConditionalSpecialCasing", "toUpperCaseEx", "(Ljava/lang/String;ILjava/util/Locale;)I", false);
mv.visitVarInsn(ISTORE, 9);
Label l15 = new Label();
mv.visitJumpInsn(GOTO, l15);
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCaseEx", "(I)I", false);
mv.visitVarInsn(ISTORE, 9);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ICONST_M1);
Label l16 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l16);
mv.visitVarInsn(ILOAD, 9);
mv.visitLdcInsn(new Integer(65536));
Label l17 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l17);
mv.visitLabel(l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ICONST_M1);
Label l18 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l18);
mv.visitVarInsn(ILOAD, 7);
Label l19 = new Label();
mv.visitJumpInsn(IFEQ, l19);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ConditionalSpecialCasing", "toUpperCaseCharArray", "(Ljava/lang/String;ILjava/util/Locale;)[C", false);
mv.visitVarInsn(ASTORE, 8);
Label l20 = new Label();
mv.visitJumpInsn(GOTO, l20);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toUpperCaseCharArray", "(I)[C", false);
mv.visitVarInsn(ASTORE, 8);
mv.visitJumpInsn(GOTO, l20);
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ICONST_2);
Label l21 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l21);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I[CI)I", false);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ISUB);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l22 = new Label();
mv.visitJumpInsn(GOTO, l22);
mv.visitLabel(l21);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 9);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "toChars", "(I)[C", false);
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l20);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER, "[C", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 13);
mv.visitVarInsn(ILOAD, 13);
mv.visitVarInsn(ILOAD, 11);
Label l23 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l23);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ILOAD, 13);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ISUB);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 14);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 14);
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l23);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 14);
Label l24 = new Label();
mv.visitLabel(l24);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 14);
mv.visitVarInsn(ILOAD, 13);
Label l25 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l25);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 14);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ILOAD, 14);
mv.visitInsn(CALOAD);
mv.visitInsn(CASTORE);
mv.visitIincInsn(14, 1);
mv.visitJumpInsn(GOTO, l24);
mv.visitLabel(l25);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 13);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(ISUB);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
mv.visitJumpInsn(GOTO, l22);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_FULL, 13, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER, Opcodes.TOP, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(I2C);
mv.visitInsn(CASTORE);
mv.visitLabel(l22);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 12);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 12);
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"java/lang/String", "java/util/Locale", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "[C", "java/lang/String", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 15);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "toUpperCase", "()Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Locale", "getDefault", "()Ljava/util/Locale;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "trim", "()Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitVarInsn(ASTORE, 3);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, "[C"}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(CALOAD);
mv.visitIntInsn(BIPUSH, 32);
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitInsn(CALOAD);
mv.visitIntInsn(BIPUSH, 32);
mv.visitJumpInsn(IF_ICMPGT, l2);
mv.visitIincInsn(1, -1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFGT, l3);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;", false);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "toString", "()Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "toCharArray", "()[C", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/String", "value", "[C");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_VARARGS, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/util/Formatter");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Formatter", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Formatter", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Formatter", "toString", "()Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC + ACC_VARARGS, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/util/Formatter");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Formatter", "<init>", "(Ljava/util/Locale;)V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Formatter", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Formatter", "toString", "()Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitLdcInsn("null");
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "toString", "()Ljava/lang/String;", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "([C)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([C)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "([CII)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "copyValueOf", "([CII)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CII)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "copyValueOf", "([C)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([C)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(Z)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 0);
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitLdcInsn("true");
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitLdcInsn("false");
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/String"});
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(C)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitInsn(ICONST_1);
mv.visitIntInsn(NEWARRAY, T_CHAR);
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 0);
mv.visitInsn(CASTORE);
mv.visitVarInsn(ASTORE, 1);
mv.visitTypeInsn(NEW, "java/lang/String");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([CZ)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(I)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "toString", "(I)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(J)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(LLOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "toString", "(J)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(F)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(FLOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Float", "toString", "(F)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "valueOf", "(D)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(DLOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Double", "toString", "(D)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_NATIVE, "intern", "()Ljava/lang/String;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC, "compareTo", "(Ljava/lang/Object;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/String");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "compareTo", "(Ljava/lang/String;)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
mv.visitCode();
mv.visitInsn(ICONST_0);
mv.visitTypeInsn(ANEWARRAY, "java/io/ObjectStreamField");
mv.visitFieldInsn(PUTSTATIC, "java/lang/String", "serialPersistentFields", "[Ljava/io/ObjectStreamField;");
mv.visitTypeInsn(NEW, "java/lang/String$CaseInsensitiveComparator");
mv.visitInsn(DUP);
mv.visitInsn(ACONST_NULL);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String$CaseInsensitiveComparator", "<init>", "(Ljava/lang/String$1;)V", false);
mv.visitFieldInsn(PUTSTATIC, "java/lang/String", "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;");
mv.visitInsn(RETURN);
mv.visitMaxs(3, 0);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
